<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gateway port on Jing Lin‘s profile</title><link>http://linjing.io/tags/gateway-port/</link><description>Recent content in gateway port on Jing Lin‘s profile</description><generator>Source Themes academia (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright &amp;copy; {year} linjing.io host on github, imesh.cloud host on netlify. CI/CD by github actions and netlify.Thanks bootcdn support for front libary CDN</copyright><lastBuildDate>Mon, 13 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://linjing.io/tags/gateway-port/index.xml" rel="self" type="application/rss+xml"/><item><title>The rule of Istio Gateway port definition</title><link>http://linjing.io/post/istio-ingressgateay-port-relationship/</link><pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate><guid>http://linjing.io/post/istio-ingressgateay-port-relationship/</guid><description>&lt;p>The port and protocol in the Gateway resource define the listener port and protocol in ingressgateway (envoy).&lt;/p>
&lt;p>However, the port in Gateway can be set to the port or targetPort of the ingressgateway svc, and finally the targetPort is used in envoy.&lt;/p>
&lt;p>For example below, the port is defined as 443 in Gateway:&lt;/p>
&lt;pre>&lt;code>apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
namespace: istio-bookinfo
name: bookinfo-gateway
spec:
selector:
istio: ingressgateway # use istio default controller
servers:
- port:
number: 8080
name: http
protocol: HTTP
hosts:
- &amp;quot;*&amp;quot;
- port:
number: 443 #####use for assembling the route name that under the listener
name: https #####use for assembling the route name that under the listener
protocol: HTTPS #####use for assembling the route name that under the listener
tls:
mode: SIMPLE
serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
privateKey: /etc/istio/ingressgateway-certs/tls.key
hosts:
- &amp;quot;*&amp;quot;
&lt;/code>&lt;/pre>&lt;p>While, when you check the envoy configurations, the listener port actually is 8443&lt;/p>
&lt;pre>&lt;code>[root@k8s-master-v1-16 networking]# istioctl proxy-config listener istio-ingressgateway-7b869dcfb5-lfqz9.istio-system --port 8443 -o json
[
{
&amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_8443&amp;quot;,
&amp;quot;address&amp;quot;: {
&amp;quot;socketAddress&amp;quot;: {
&amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
&amp;quot;portValue&amp;quot;: 8443 《《《《《8443！！
}
},
&amp;quot;filterChains&amp;quot;: [
{
&amp;quot;filters&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
&amp;quot;typedConfig&amp;quot;: {
&amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
&amp;quot;statPrefix&amp;quot;: &amp;quot;outbound_0.0.0.0_8443&amp;quot;,
&amp;quot;rds&amp;quot;: {
&amp;quot;configSource&amp;quot;: {
&amp;quot;ads&amp;quot;: {}
},
###The route name is assembled by protocol + port number + portname, Note here: use 443,not 8443
&amp;quot;routeConfigName&amp;quot;: &amp;quot;https.443.https.bookinfo-gateway.istio-bookinfo&amp;quot;
},
&lt;/code>&lt;/pre>&lt;p>This is because the ingressgateway&amp;rsquo;s 443 svc port is corresponding to targetPort 8443:&lt;/p>
&lt;pre>&lt;code> - name: https
nodePort: 30975
port: 443
protocol: TCP
targetPort: 8443
&lt;/code>&lt;/pre>&lt;p>If the port is defined as 8443 in the gateway, the result is same, will generate 8443 listener in envoy.&lt;/p>
&lt;p>When there is only one gateway definition, it is ok to use port or the corresponding targetport of the ingressgateway, both will get the same listener port in evnoy lastly. But please be noted, if there are multiple gateway definitions and set same protocol, then the port in the gateways must be same. Otherwise, the listener will only associate the routeConfigName generated by the gateway that created afterwards, and the associated route will not contain the virtualservice logic that related to the first created gateway.&lt;/p>
&lt;p>For example, configure HTTP:8080 in the gateway in the istio-bookinfo namespace (the svc 80 of ingressgateway corresponds to the 8080 of the pod):&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
items:
spec:
selector:
istio: ingressgateway
servers:
- hosts:
- '*'
port:
name: http
number: 8080
protocol: HTTP
- hosts:
- istiobookinfo.lab.f5se.io
port:
name: https
number: 443
protocol: HTTPS
&lt;/code>&lt;/pre>&lt;p>The gateway in the httpbin namespace configures HTTP：80，&lt;/p>
&lt;pre>&lt;code>[root@k8s-master-v1-16 httpbin]# kubectl get gateways.networking.istio.io -n httpbin -o yaml
apiVersion: v1
items:
spec:
selector:
istio: ingressgateway
servers:
- hosts:
- httpbin.lab.f5se.io
port:
name: http-httpbin
number: 80
protocol: HTTP
&lt;/code>&lt;/pre>&lt;p>This leads to the fact that the envoy listener is actually actually associated with the later created http.80 route:&lt;/p>
&lt;pre>&lt;code>[root@k8s-master-v1-16 ~]# istioctl proxy-config listener istio-ingressgateway-7b869dcfb5-gh2vr.istio-system --port 8080 -o json
[
{
&amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_8080&amp;quot;,
&amp;quot;address&amp;quot;: {
&amp;quot;socketAddress&amp;quot;: {
&amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
&amp;quot;portValue&amp;quot;: 8080
}
},
&amp;quot;filterChains&amp;quot;: [
{
&amp;quot;filters&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
&amp;quot;typedConfig&amp;quot;: {
&amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
&amp;quot;statPrefix&amp;quot;: &amp;quot;outbound_0.0.0.0_8080&amp;quot;,
&amp;quot;rds&amp;quot;: {
&amp;quot;configSource&amp;quot;: {
&amp;quot;ads&amp;quot;: {}
},
&amp;quot;routeConfigName&amp;quot;: &amp;quot;http.80&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Therefore, in these multi gateways configuration, which ultimately shares the listener port, the port number and protocol name need to be the same (BEST practice is using the port number that envoy actually listens to), but the port must be named differently (if the port name is the same, envoy will show the conflicting configuration logs):&lt;/p>
&lt;pre>&lt;code>2020-07-10T09:56:26.192152Z warning envoy config [external/envoy/source/common/config/grpc_subscription_impl.cc:101] gRPC config for type.googleapis.com/envoy.api.v2.Listener rejected:
Error adding/updating listener(s) 0.0.0.0_8080: duplicate listener 0.0.0.0_8080 found
&lt;/code>&lt;/pre>&lt;p>Gateways with the same protocol and the same port, no matter whether they are in the same namespace, can only share one listener in envoy, so they will also share same route. If you accidentally configure the same virtualservice under different namespaces at this time, it will cause envoy to generate two identical match conditions in the same route (and the associated cluster is different namespace suffix, This resulting in abnormal access)&lt;/p>
&lt;p>Check more istio practice detail at my tech blog &lt;a href="https://imesh.club">https://imesh.club&lt;/a>&lt;/p></description></item></channel></rss>